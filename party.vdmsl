-- ----------------------------------------------------------------------------
--
-- Party
-- Author: William Shaffer (it@acorn-scholarship.org)
--  
-- Copyright (c) 2025 Acorn Scholarship Fund Inc.
-- 
-- ----------------------------------------------------------------------------

-- The party module defines the Person, Educational Institution, and related
-- classes.

module Party

imports
    from Country 
        types 
            Country renamed Country;
            USState renamed USState,
    from Common
        types 
            String renamed String;
        functions
            toString: seq of char -> String renamed toString,
    from Date
        types 
            Date renamed Date;


exports 
    types 
        struct Address;
        struct Person;
        struct EducationalInstitution;
        PostalCode;
        UserId;
        Salutation;
        struct DependentRelation;
        struct MentorRelation;
        struct Attendance;
    functions
        salutationToString: Salutation -> String;

definitions

-- ----------------------------------------------------------------------------
types
-- ---------------------------------------------------------------------------- 

PostalCode = seq of char;
PhoneNumber = seq of char;
Email = seq of char;

UserId = seq of char;
InstId = seq of char;

Salutation = <Mr>
|  <Ms> 
|  <Mrs>
|  <Dr>   
;

Address :: 
    street     : String
    unit       : String
    city       : String
    stateAbbrv : USState 
    postalCode : PostalCode
    country    : Country
    ;

Person :: 
    userId     : UserId
    salutation : Salutation
    nameLast   :  String
    nameFirst  : String
    suffix     : String
    address    : Address
    phoneNumber: PhoneNumber
    email      : Email
    ;

EducationalInstitution ::
    instId  : InstId
    name    : String
    contact : String 
    address : Address
    ;

MentorRelation ::
    createDate      : Date
    endDate         : Date
    mentor          : UserId
    associate       : UserId
    ;

DependentRelation :: 
    createDate      : Date
    endDate         : Date
    associate       : UserId
    dependent       : UserId
    ;    

TermType = <Summer>
|   <Fall>
|   <Spring>
;

Attendance :: 
    createDate      : Date
    endDate         : Date 
    term            : TermType
    year            : nat1 
    associate       : UserId
    dependent       : UserId
    school          : InstId
    ;

-- ----------------------------------------------------------------------------
values
-- ----------------------------------------------------------------------------

Salutations : set of Salutation = {
    <Mr>, <Ms>, <Mrs>, <Dr>
};

-- ----------------------------------------------------------------------------
functions
-- ----------------------------------------------------------------------------

-- salutationToString returns a string version of the salutation argument.
salutationToString: Salutation -> String
salutationToString(salutation) ==
    let  
        cors = {
            <Mr> |-> "Mr.",
            <Ms> |-> "Ms.",
            <Mrs>|-> "Mrs.",
            <Dr> |-> "Dr."
        } 
    in 
        toString(cors(salutation))
pre salutation in set Salutations

-- ----------------------------------------------------------------------------
-- State
-- ----------------------------------------------------------------------------


-- ----------------------------------------------------------------------------
operations
-- ----------------------------------------------------------------------------


end Party